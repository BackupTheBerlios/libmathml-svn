#include "mmldict.h"
#include "domstring.h"
using std::map;
using std::pair;

bool MMLDict::done = false;
ushort
MMLDict::resolveEntity(const DOMString &s) {
    if (!done) {
        makeEntDict();
    }
    map<const char *, ushort>::const_iterator i;
    i = ent.find(s.utf8());
    if (i == ent.end()) {
        return 0;
    }
    return i->second;
}

map<const char *, ushort, MMLDict::ltstr> MMLDict::ent;

void
MMLDict::makeEntDict() {
    done = true;
    ent.insert(pair<const char *, ushort>("angle", 0x02220));
    ent.insert(pair<const char *, ushort>("ApplyFunction", 0x02061));
    ent.insert(pair<const char *, ushort>("approx", 0x02248));
    ent.insert(pair<const char *, ushort>("approxeq", 0x0224A));
    ent.insert(pair<const char *, ushort>("Assign", 0x02254));
    ent.insert(pair<const char *, ushort>("backcong", 0x0224C));
    ent.insert(pair<const char *, ushort>("backepsilon", 0x003F6));
    ent.insert(pair<const char *, ushort>("backprime", 0x02035));
    ent.insert(pair<const char *, ushort>("backsim", 0x0223D));
    ent.insert(pair<const char *, ushort>("backsimeq", 0x022CD));
    ent.insert(pair<const char *, ushort>("Backslash", 0x02216));
    ent.insert(pair<const char *, ushort>("barwedge", 0x022BC));
    ent.insert(pair<const char *, ushort>("because", 0x02235));
    ent.insert(pair<const char *, ushort>("Because", 0x02235));
    ent.insert(pair<const char *, ushort>("Bernoullis", 0x0212C));
    ent.insert(pair<const char *, ushort>("between", 0x0226C));
    ent.insert(pair<const char *, ushort>("bigcap", 0x022C2));
    ent.insert(pair<const char *, ushort>("bigcirc", 0x025EF));
    ent.insert(pair<const char *, ushort>("bigcup", 0x022C3));
    ent.insert(pair<const char *, ushort>("bigodot", 0x02299));
    ent.insert(pair<const char *, ushort>("bigoplus", 0x02295));
    ent.insert(pair<const char *, ushort>("bigotimes", 0x02297));
    ent.insert(pair<const char *, ushort>("bigsqcup", 0x02294));
    ent.insert(pair<const char *, ushort>("bigstar", 0x02605));
    ent.insert(pair<const char *, ushort>("bigtriangledown", 0x025BD));
    ent.insert(pair<const char *, ushort>("bigtriangleup", 0x025B3));
    ent.insert(pair<const char *, ushort>("biguplus", 0x0228E));
    ent.insert(pair<const char *, ushort>("bigvee", 0x022C1));
    ent.insert(pair<const char *, ushort>("bigwedge", 0x022C0));
    ent.insert(pair<const char *, ushort>("bkarow", 0x0290D));
    ent.insert(pair<const char *, ushort>("blacklozenge", 0x029EB));
    ent.insert(pair<const char *, ushort>("blacksquare", 0x025AA));
    ent.insert(pair<const char *, ushort>("blacktriangle", 0x025B4));
    ent.insert(pair<const char *, ushort>("blacktriangledown", 0x025BE));
    ent.insert(pair<const char *, ushort>("blacktriangleleft", 0x025C2));
    ent.insert(pair<const char *, ushort>("blacktriangleright", 0x025B8));
    ent.insert(pair<const char *, ushort>("bot", 0x022A5));
    ent.insert(pair<const char *, ushort>("boxminus", 0x0229F));
    ent.insert(pair<const char *, ushort>("boxplus", 0x0229E));
    ent.insert(pair<const char *, ushort>("boxtimes", 0x022A0));
    ent.insert(pair<const char *, ushort>("Breve", 0x002D8));
    ent.insert(pair<const char *, ushort>("bullet", 0x02022));
    ent.insert(pair<const char *, ushort>("bumpeq", 0x0224F));
    ent.insert(pair<const char *, ushort>("Bumpeq", 0x0224E));
    ent.insert(pair<const char *, ushort>("CapitalDifferentialD", 0x02145));
    ent.insert(pair<const char *, ushort>("Cayleys", 0x0212D));
    ent.insert(pair<const char *, ushort>("Cedilla", 0x000B8));
    ent.insert(pair<const char *, ushort>("centerdot", 0x000B7));
    ent.insert(pair<const char *, ushort>("CenterDot", 0x000B7));
    ent.insert(pair<const char *, ushort>("checkmark", 0x02713));
    ent.insert(pair<const char *, ushort>("circeq", 0x02257));
    ent.insert(pair<const char *, ushort>("circlearrowleft", 0x021BA));
    ent.insert(pair<const char *, ushort>("circlearrowright", 0x021BB));
    ent.insert(pair<const char *, ushort>("circledast", 0x0229B));
    ent.insert(pair<const char *, ushort>("circledcirc", 0x0229A));
    ent.insert(pair<const char *, ushort>("circleddash", 0x0229D));
    ent.insert(pair<const char *, ushort>("CircleDot", 0x02299));
    ent.insert(pair<const char *, ushort>("circledR", 0x000AE));
    ent.insert(pair<const char *, ushort>("circledS", 0x024C8));
    ent.insert(pair<const char *, ushort>("CircleMinus", 0x02296));
    ent.insert(pair<const char *, ushort>("CirclePlus", 0x02295));
    ent.insert(pair<const char *, ushort>("CircleTimes", 0x02297));
    ent.insert(pair<const char *, ushort>("ClockwiseContourIntegral", 0x02232));
    ent.insert(pair<const char *, ushort>("CloseCurlyDoubleQuote", 0x0201D));
    ent.insert(pair<const char *, ushort>("CloseCurlyQuote", 0x02019));
    ent.insert(pair<const char *, ushort>("clubsuit", 0x02663));
    ent.insert(pair<const char *, ushort>("coloneq", 0x02254));
    ent.insert(pair<const char *, ushort>("complement", 0x02201));
    ent.insert(pair<const char *, ushort>("complexes", 0x02102));
    ent.insert(pair<const char *, ushort>("Congruent", 0x02261));
    ent.insert(pair<const char *, ushort>("ContourIntegral", 0x0222E));
    ent.insert(pair<const char *, ushort>("Coproduct", 0x02210));
    ent.insert(pair<const char *, ushort>("CounterClockwiseContourIntegral", 0x02233));
    ent.insert(pair<const char *, ushort>("CupCap", 0x0224D));
    ent.insert(pair<const char *, ushort>("curlyeqprec", 0x022DE));
    ent.insert(pair<const char *, ushort>("curlyeqsucc", 0x022DF));
    ent.insert(pair<const char *, ushort>("curlyvee", 0x022CE));
    ent.insert(pair<const char *, ushort>("curlywedge", 0x022CF));
    ent.insert(pair<const char *, ushort>("curvearrowleft", 0x021B6));
    ent.insert(pair<const char *, ushort>("curvearrowright", 0x021B7));
    ent.insert(pair<const char *, ushort>("dbkarow", 0x0290F));
    ent.insert(pair<const char *, ushort>("ddagger", 0x02021));
    ent.insert(pair<const char *, ushort>("ddotseq", 0x02A77));
    ent.insert(pair<const char *, ushort>("Del", 0x02207));
    ent.insert(pair<const char *, ushort>("DiacriticalAcute", 0x000B4));
    ent.insert(pair<const char *, ushort>("DiacriticalDot", 0x002D9));
    ent.insert(pair<const char *, ushort>("DiacriticalDoubleAcute", 0x002DD));
    ent.insert(pair<const char *, ushort>("DiacriticalGrave", 0x00060));
    ent.insert(pair<const char *, ushort>("DiacriticalTilde", 0x002DC));
    ent.insert(pair<const char *, ushort>("diamond", 0x022C4));
    ent.insert(pair<const char *, ushort>("Diamond", 0x022C4));
    ent.insert(pair<const char *, ushort>("diamondsuit", 0x02666));
    ent.insert(pair<const char *, ushort>("DifferentialD", 0x02146));
    ent.insert(pair<const char *, ushort>("digamma", 0x003DC));
    ent.insert(pair<const char *, ushort>("div", 0x000F7));
    ent.insert(pair<const char *, ushort>("divideontimes", 0x022C7));
    ent.insert(pair<const char *, ushort>("doteq", 0x02250));
    ent.insert(pair<const char *, ushort>("doteqdot", 0x02251));
    ent.insert(pair<const char *, ushort>("DotEqual", 0x02250));
    ent.insert(pair<const char *, ushort>("dotminus", 0x02238));
    ent.insert(pair<const char *, ushort>("dotplus", 0x02214));
    ent.insert(pair<const char *, ushort>("dotsquare", 0x022A1));
    ent.insert(pair<const char *, ushort>("doublebarwedge", 0x02306));
    ent.insert(pair<const char *, ushort>("DoubleContourIntegral", 0x0222F));
    ent.insert(pair<const char *, ushort>("DoubleDot", 0x000A8));
    ent.insert(pair<const char *, ushort>("DoubleDownArrow", 0x021D3));
    ent.insert(pair<const char *, ushort>("DoubleLeftArrow", 0x021D0));
    ent.insert(pair<const char *, ushort>("DoubleLeftRightArrow", 0x021D4));
    ent.insert(pair<const char *, ushort>("DoubleLeftTee", 0x02AE4));
    ent.insert(pair<const char *, ushort>("DoubleLongLeftArrow", 0x0F579));
    ent.insert(pair<const char *, ushort>("DoubleLongLeftRightArrow", 0x0F57B));
    ent.insert(pair<const char *, ushort>("DoubleLongRightArrow", 0x0F57A));
    ent.insert(pair<const char *, ushort>("DoubleRightArrow", 0x021D2));
    ent.insert(pair<const char *, ushort>("DoubleRightTee", 0x022A8));
    ent.insert(pair<const char *, ushort>("DoubleUpArrow", 0x021D1));
    ent.insert(pair<const char *, ushort>("DoubleUpDownArrow", 0x021D5));
    ent.insert(pair<const char *, ushort>("DoubleVerticalBar", 0x02225));
    ent.insert(pair<const char *, ushort>("downarrow", 0x02193));
    ent.insert(pair<const char *, ushort>("Downarrow", 0x021D3));
    ent.insert(pair<const char *, ushort>("DownArrow", 0x02193));
    ent.insert(pair<const char *, ushort>("DownArrowUpArrow", 0x021F5));
    ent.insert(pair<const char *, ushort>("downdownarrows", 0x021CA));
    ent.insert(pair<const char *, ushort>("downharpoonleft", 0x021C3));
    ent.insert(pair<const char *, ushort>("downharpoonright", 0x021C2));
    ent.insert(pair<const char *, ushort>("DownLeftVector", 0x021BD));
    ent.insert(pair<const char *, ushort>("DownRightVector", 0x021C1));
    ent.insert(pair<const char *, ushort>("DownTee", 0x022A4));
    ent.insert(pair<const char *, ushort>("DownTeeArrow", 0x021A7));
    ent.insert(pair<const char *, ushort>("drbkarow", 0x02910));
    ent.insert(pair<const char *, ushort>("Element", 0x02208));
    ent.insert(pair<const char *, ushort>("emptyset", 0x02205));
    ent.insert(pair<const char *, ushort>("eqcirc", 0x02256));
    ent.insert(pair<const char *, ushort>("eqcolon", 0x02255));
    ent.insert(pair<const char *, ushort>("eqsim", 0x02242));
    ent.insert(pair<const char *, ushort>("eqslantgtr", 0x022DD));
    ent.insert(pair<const char *, ushort>("eqslantless", 0x022DC));
    ent.insert(pair<const char *, ushort>("EqualTilde", 0x02242));
    ent.insert(pair<const char *, ushort>("Equilibrium", 0x021CC));
    ent.insert(pair<const char *, ushort>("Exists", 0x02203));
    ent.insert(pair<const char *, ushort>("expectation", 0x02130));
    ent.insert(pair<const char *, ushort>("exponentiale", 0x02147));
    ent.insert(pair<const char *, ushort>("ExponentialE", 0x02147));
    ent.insert(pair<const char *, ushort>("fallingdotseq", 0x02252));
    ent.insert(pair<const char *, ushort>("ForAll", 0x02200));
    ent.insert(pair<const char *, ushort>("Fouriertrf", 0x02131));
    ent.insert(pair<const char *, ushort>("geq", 0x02265));
    ent.insert(pair<const char *, ushort>("geqq", 0x02267));
    ent.insert(pair<const char *, ushort>("geqslant", 0x02A7E));
    ent.insert(pair<const char *, ushort>("gg", 0x0226B));
    ent.insert(pair<const char *, ushort>("ggg", 0x022D9));
    ent.insert(pair<const char *, ushort>("gnapprox", 0x02A8A));
    ent.insert(pair<const char *, ushort>("gneq", 0x02269));
    ent.insert(pair<const char *, ushort>("gneqq", 0x02269));
    ent.insert(pair<const char *, ushort>("GreaterEqual", 0x02265));
    ent.insert(pair<const char *, ushort>("GreaterEqualLess", 0x022DB));
    ent.insert(pair<const char *, ushort>("GreaterFullEqual", 0x02267));
    ent.insert(pair<const char *, ushort>("GreaterLess", 0x02277));
    ent.insert(pair<const char *, ushort>("GreaterSlantEqual", 0x02A7E));
    ent.insert(pair<const char *, ushort>("GreaterTilde", 0x02273));
    ent.insert(pair<const char *, ushort>("gtrapprox", 0x02273));
    ent.insert(pair<const char *, ushort>("gtrdot", 0x022D7));
    ent.insert(pair<const char *, ushort>("gtreqless", 0x022DB));
    ent.insert(pair<const char *, ushort>("gtreqqless", 0x022DB));
    ent.insert(pair<const char *, ushort>("gtrless", 0x02277));
    ent.insert(pair<const char *, ushort>("gtrsim", 0x02273));
    ent.insert(pair<const char *, ushort>("gvertneqq", 0x02269));
    ent.insert(pair<const char *, ushort>("Hacek", 0x002C7));
    ent.insert(pair<const char *, ushort>("Hat", 0x00302));
    ent.insert(pair<const char *, ushort>("hbar", 0x0210F));
    ent.insert(pair<const char *, ushort>("heartsuit", 0x02661));
    ent.insert(pair<const char *, ushort>("HilbertSpace", 0x0210B));
    ent.insert(pair<const char *, ushort>("hksearow", 0x02925));
    ent.insert(pair<const char *, ushort>("hkswarow", 0x02926));
    ent.insert(pair<const char *, ushort>("hookleftarrow", 0x021A9));
    ent.insert(pair<const char *, ushort>("hookrightarrow", 0x021AA));
    ent.insert(pair<const char *, ushort>("hslash", 0x0210F));
    ent.insert(pair<const char *, ushort>("HumpDownHump", 0x0224E));
    ent.insert(pair<const char *, ushort>("HumpEqual", 0x0224F));
    ent.insert(pair<const char *, ushort>("iiiint", 0x02A0C));
    ent.insert(pair<const char *, ushort>("iiint", 0x0222D));
    ent.insert(pair<const char *, ushort>("Im", 0x02111));
    ent.insert(pair<const char *, ushort>("ImaginaryI", 0x02148));
    ent.insert(pair<const char *, ushort>("imagline", 0x02110));
    ent.insert(pair<const char *, ushort>("imagpart", 0x02111));
    ent.insert(pair<const char *, ushort>("Implies", 0x021D2));
    ent.insert(pair<const char *, ushort>("in", 0x02208));
    ent.insert(pair<const char *, ushort>("integers", 0x02124));
    ent.insert(pair<const char *, ushort>("Integral", 0x0222B));
    ent.insert(pair<const char *, ushort>("intercal", 0x022BA));
    ent.insert(pair<const char *, ushort>("Intersection", 0x022C2));
    ent.insert(pair<const char *, ushort>("intprod", 0x02A3C));
    ent.insert(pair<const char *, ushort>("InvisibleComma", 0x0200B));
    ent.insert(pair<const char *, ushort>("InvisibleTimes", 0x02062));
    ent.insert(pair<const char *, ushort>("langle", 0x02329));
    ent.insert(pair<const char *, ushort>("Laplacetrf", 0x02112));
    ent.insert(pair<const char *, ushort>("lbrace", 0x0007B));
    ent.insert(pair<const char *, ushort>("lbrack", 0x0005B));
    ent.insert(pair<const char *, ushort>("LeftAngleBracket", 0x02329));
    ent.insert(pair<const char *, ushort>("leftarrow", 0x02190));
    ent.insert(pair<const char *, ushort>("Leftarrow", 0x021D0));
    ent.insert(pair<const char *, ushort>("LeftArrow", 0x02190));
    ent.insert(pair<const char *, ushort>("LeftArrowBar", 0x021E4));
    ent.insert(pair<const char *, ushort>("LeftArrowRightArrow", 0x021C6));
    ent.insert(pair<const char *, ushort>("leftarrowtail", 0x021A2));
    ent.insert(pair<const char *, ushort>("LeftCeiling", 0x02308));
    ent.insert(pair<const char *, ushort>("LeftDoubleBracket", 0x0301A));
    ent.insert(pair<const char *, ushort>("LeftDownVector", 0x021C3));
    ent.insert(pair<const char *, ushort>("LeftFloor", 0x0230A));
    ent.insert(pair<const char *, ushort>("leftharpoondown", 0x021BD));
    ent.insert(pair<const char *, ushort>("leftharpoonup", 0x021BC));
    ent.insert(pair<const char *, ushort>("leftleftarrows", 0x021C7));
    ent.insert(pair<const char *, ushort>("leftrightarrow", 0x02194));
    ent.insert(pair<const char *, ushort>("Leftrightarrow", 0x021D4));
    ent.insert(pair<const char *, ushort>("LeftRightArrow", 0x02194));
    ent.insert(pair<const char *, ushort>("leftrightarrows", 0x021C6));
    ent.insert(pair<const char *, ushort>("leftrightharpoons", 0x021CB));
    ent.insert(pair<const char *, ushort>("leftrightsquigarrow", 0x021AD));
    ent.insert(pair<const char *, ushort>("LeftTee", 0x022A3));
    ent.insert(pair<const char *, ushort>("LeftTeeArrow", 0x021A4));
    ent.insert(pair<const char *, ushort>("leftthreetimes", 0x022CB));
    ent.insert(pair<const char *, ushort>("LeftTriangle", 0x022B2));
    ent.insert(pair<const char *, ushort>("LeftTriangleEqual", 0x022B4));
    ent.insert(pair<const char *, ushort>("LeftUpVector", 0x021BF));
    ent.insert(pair<const char *, ushort>("LeftVector", 0x021BC));
    ent.insert(pair<const char *, ushort>("leq", 0x02264));
    ent.insert(pair<const char *, ushort>("leqq", 0x02266));
    ent.insert(pair<const char *, ushort>("leqslant", 0x02A7D));
    ent.insert(pair<const char *, ushort>("lessapprox", 0x02272));
    ent.insert(pair<const char *, ushort>("lessdot", 0x022D6));
    ent.insert(pair<const char *, ushort>("lesseqgtr", 0x022DA));
    ent.insert(pair<const char *, ushort>("lesseqqgtr", 0x022DA));
    ent.insert(pair<const char *, ushort>("LessEqualGreater", 0x022DA));
    ent.insert(pair<const char *, ushort>("LessFullEqual", 0x02266));
    ent.insert(pair<const char *, ushort>("LessGreater", 0x02276));
    ent.insert(pair<const char *, ushort>("lessgtr", 0x02276));
    ent.insert(pair<const char *, ushort>("lesssim", 0x02272));
    ent.insert(pair<const char *, ushort>("LessSlantEqual", 0x02A7D));
    ent.insert(pair<const char *, ushort>("LessTilde", 0x02272));
    ent.insert(pair<const char *, ushort>("ll", 0x0226A));
    ent.insert(pair<const char *, ushort>("llcorner", 0x0231E));
    ent.insert(pair<const char *, ushort>("Lleftarrow", 0x021DA));
    ent.insert(pair<const char *, ushort>("lmoustache", 0x023B0));
    ent.insert(pair<const char *, ushort>("lnapprox", 0x02A89));
    ent.insert(pair<const char *, ushort>("lneq", 0x02268));
    ent.insert(pair<const char *, ushort>("lneqq", 0x02268));
    ent.insert(pair<const char *, ushort>("longleftarrow", 0x0F576));
    ent.insert(pair<const char *, ushort>("Longleftarrow", 0x0F579));
    ent.insert(pair<const char *, ushort>("LongLeftArrow", 0x0F576));
    ent.insert(pair<const char *, ushort>("longleftrightarrow", 0x0F578));
    ent.insert(pair<const char *, ushort>("Longleftrightarrow", 0x0F57B));
    ent.insert(pair<const char *, ushort>("LongLeftRightArrow", 0x0F578));
    ent.insert(pair<const char *, ushort>("longmapsto", 0x0F57D));
    ent.insert(pair<const char *, ushort>("longrightarrow", 0x0F577));
    ent.insert(pair<const char *, ushort>("Longrightarrow", 0x0F57A));
    ent.insert(pair<const char *, ushort>("LongRightArrow", 0x0F577));
    ent.insert(pair<const char *, ushort>("looparrowleft", 0x021AB));
    ent.insert(pair<const char *, ushort>("looparrowright", 0x021AC));
    ent.insert(pair<const char *, ushort>("LowerLeftArrow", 0x02199));
    ent.insert(pair<const char *, ushort>("LowerRightArrow", 0x02198));
    ent.insert(pair<const char *, ushort>("lozenge", 0x025CA));
    ent.insert(pair<const char *, ushort>("lrcorner", 0x0231F));
    ent.insert(pair<const char *, ushort>("Lsh", 0x021B0));
    ent.insert(pair<const char *, ushort>("lvertneqq", 0x02268));
    ent.insert(pair<const char *, ushort>("maltese", 0x02720));
    ent.insert(pair<const char *, ushort>("mapsto", 0x021A6));
    ent.insert(pair<const char *, ushort>("measuredangle", 0x02221));
    ent.insert(pair<const char *, ushort>("Mellintrf", 0x02133));
    ent.insert(pair<const char *, ushort>("MinusPlus", 0x02213));
    ent.insert(pair<const char *, ushort>("mp", 0x02213));
    ent.insert(pair<const char *, ushort>("multimap", 0x022B8));
    ent.insert(pair<const char *, ushort>("napprox", 0x02249));
    ent.insert(pair<const char *, ushort>("natural", 0x0266E));
    ent.insert(pair<const char *, ushort>("naturals", 0x02115));
    ent.insert(pair<const char *, ushort>("nearrow", 0x02197));
    ent.insert(pair<const char *, ushort>("NestedGreaterGreater", 0x0226B));
    ent.insert(pair<const char *, ushort>("NestedLessLess", 0x0226A));
    ent.insert(pair<const char *, ushort>("nexists", 0x02204));
    ent.insert(pair<const char *, ushort>("ngeq", 0x02271));
    ent.insert(pair<const char *, ushort>("ngeqq", 0x02271));
    ent.insert(pair<const char *, ushort>("ngeqslant", 0x02271));
    ent.insert(pair<const char *, ushort>("ngtr", 0x0226F));
    ent.insert(pair<const char *, ushort>("nleftarrow", 0x0219A));
    ent.insert(pair<const char *, ushort>("nLeftarrow", 0x021CD));
    ent.insert(pair<const char *, ushort>("nleftrightarrow", 0x021AE));
    ent.insert(pair<const char *, ushort>("nLeftrightarrow", 0x021CE));
    ent.insert(pair<const char *, ushort>("nleq", 0x02270));
    ent.insert(pair<const char *, ushort>("nleqq", 0x02270));
    ent.insert(pair<const char *, ushort>("nleqslant", 0x02270));
    ent.insert(pair<const char *, ushort>("nless", 0x0226E));
    ent.insert(pair<const char *, ushort>("NonBreakingSpace", 0x000A0));
    ent.insert(pair<const char *, ushort>("NotCongruent", 0x02262));
    ent.insert(pair<const char *, ushort>("NotDoubleVerticalBar", 0x02226));
    ent.insert(pair<const char *, ushort>("NotElement", 0x02209));
    ent.insert(pair<const char *, ushort>("NotEqual", 0x02260));
    ent.insert(pair<const char *, ushort>("NotEqualTilde", 0x02242));
    ent.insert(pair<const char *, ushort>("NotExists", 0x02204));
    ent.insert(pair<const char *, ushort>("NotGreater", 0x0226F));
    ent.insert(pair<const char *, ushort>("NotGreaterEqual", 0x02271));
    ent.insert(pair<const char *, ushort>("NotGreaterFullEqual", 0x02270));
    ent.insert(pair<const char *, ushort>("NotGreaterGreater", 0x0226B));
    ent.insert(pair<const char *, ushort>("NotGreaterLess", 0x02279));
    ent.insert(pair<const char *, ushort>("NotGreaterSlantEqual", 0x02271));
    ent.insert(pair<const char *, ushort>("NotGreaterTilde", 0x02275));
    ent.insert(pair<const char *, ushort>("NotHumpDownHump", 0x0224E));
    ent.insert(pair<const char *, ushort>("NotLeftTriangle", 0x022EA));
    ent.insert(pair<const char *, ushort>("NotLeftTriangleEqual", 0x022EC));
    ent.insert(pair<const char *, ushort>("NotLess", 0x0226E));
    ent.insert(pair<const char *, ushort>("NotLessEqual", 0x02270));
    ent.insert(pair<const char *, ushort>("NotLessGreater", 0x02278));
    ent.insert(pair<const char *, ushort>("NotLessLess", 0x0226A));
    ent.insert(pair<const char *, ushort>("NotLessSlantEqual", 0x02270));
    ent.insert(pair<const char *, ushort>("NotLessTilde", 0x02274));
    ent.insert(pair<const char *, ushort>("NotPrecedes", 0x02280));
    ent.insert(pair<const char *, ushort>("NotPrecedesEqual", 0x02AAF));
    ent.insert(pair<const char *, ushort>("NotPrecedesSlantEqual", 0x022E0));
    ent.insert(pair<const char *, ushort>("NotReverseElement", 0x0220C));
    ent.insert(pair<const char *, ushort>("NotRightTriangle", 0x022EB));
    ent.insert(pair<const char *, ushort>("NotRightTriangleEqual", 0x022ED));
    ent.insert(pair<const char *, ushort>("NotSquareSubsetEqual", 0x022E2));
    ent.insert(pair<const char *, ushort>("NotSquareSupersetEqual", 0x022E3));
    ent.insert(pair<const char *, ushort>("NotSubset", 0x02284));
    ent.insert(pair<const char *, ushort>("NotSubsetEqual", 0x02288));
    ent.insert(pair<const char *, ushort>("NotSucceeds", 0x02281));
    ent.insert(pair<const char *, ushort>("NotSucceedsEqual", 0x02AB0));
    ent.insert(pair<const char *, ushort>("NotSucceedsSlantEqual", 0x022E1));
    ent.insert(pair<const char *, ushort>("NotSuperset", 0x02285));
    ent.insert(pair<const char *, ushort>("NotSupersetEqual", 0x02289));
    ent.insert(pair<const char *, ushort>("NotTilde", 0x02241));
    ent.insert(pair<const char *, ushort>("NotTildeEqual", 0x02244));
    ent.insert(pair<const char *, ushort>("NotTildeFullEqual", 0x02247));
    ent.insert(pair<const char *, ushort>("NotTildeTilde", 0x02249));
    ent.insert(pair<const char *, ushort>("NotVerticalBar", 0x02224));
    ent.insert(pair<const char *, ushort>("nparallel", 0x02226));
    ent.insert(pair<const char *, ushort>("nprec", 0x02280));
    ent.insert(pair<const char *, ushort>("npreceq", 0x02AAF));
    ent.insert(pair<const char *, ushort>("nrightarrow", 0x0219B));
    ent.insert(pair<const char *, ushort>("nRightarrow", 0x021CF));
    ent.insert(pair<const char *, ushort>("nshortmid", 0x02224));
    ent.insert(pair<const char *, ushort>("nshortparallel", 0x02226));
    ent.insert(pair<const char *, ushort>("nsimeq", 0x02244));
    ent.insert(pair<const char *, ushort>("nsubset", 0x02284));
    ent.insert(pair<const char *, ushort>("nsubseteq", 0x02288));
    ent.insert(pair<const char *, ushort>("nsubseteqq", 0x02288));
    ent.insert(pair<const char *, ushort>("nsucc", 0x02281));
    ent.insert(pair<const char *, ushort>("nsucceq", 0x02AB0));
    ent.insert(pair<const char *, ushort>("nsupset", 0x02285));
    ent.insert(pair<const char *, ushort>("nsupseteq", 0x02289));
    ent.insert(pair<const char *, ushort>("nsupseteqq", 0x02289));
    ent.insert(pair<const char *, ushort>("ntriangleleft", 0x022EA));
    ent.insert(pair<const char *, ushort>("ntrianglelefteq", 0x022EC));
    ent.insert(pair<const char *, ushort>("ntriangleright", 0x022EB));
    ent.insert(pair<const char *, ushort>("ntrianglerighteq", 0x022ED));
    ent.insert(pair<const char *, ushort>("nwarrow", 0x02196));
    ent.insert(pair<const char *, ushort>("oint", 0x0222E));
    ent.insert(pair<const char *, ushort>("OpenCurlyDoubleQuote", 0x0201C));
    ent.insert(pair<const char *, ushort>("OpenCurlyQuote", 0x02018));
    ent.insert(pair<const char *, ushort>("orderof", 0x02134));
    ent.insert(pair<const char *, ushort>("parallel", 0x02225));
    ent.insert(pair<const char *, ushort>("PartialD", 0x02202));
    ent.insert(pair<const char *, ushort>("pitchfork", 0x022D4));
    ent.insert(pair<const char *, ushort>("PlusMinus", 0x000B1));
    ent.insert(pair<const char *, ushort>("pm", 0x000B1));
    ent.insert(pair<const char *, ushort>("Poincareplane", 0x0210C));
    ent.insert(pair<const char *, ushort>("prec", 0x0227A));
    ent.insert(pair<const char *, ushort>("precapprox", 0x0227E));
    ent.insert(pair<const char *, ushort>("preccurlyeq", 0x0227C));
    ent.insert(pair<const char *, ushort>("Precedes", 0x0227A));
    ent.insert(pair<const char *, ushort>("PrecedesEqual", 0x02AAF));
    ent.insert(pair<const char *, ushort>("PrecedesSlantEqual", 0x0227C));
    ent.insert(pair<const char *, ushort>("PrecedesTilde", 0x0227E));
    ent.insert(pair<const char *, ushort>("preceq", 0x02AAF));
    ent.insert(pair<const char *, ushort>("precnapprox", 0x022E8));
    ent.insert(pair<const char *, ushort>("precneqq", 0x02AB5));
    ent.insert(pair<const char *, ushort>("precnsim", 0x022E8));
    ent.insert(pair<const char *, ushort>("precsim", 0x0227E));
    ent.insert(pair<const char *, ushort>("primes", 0x02119));
    ent.insert(pair<const char *, ushort>("Proportion", 0x02237));
    ent.insert(pair<const char *, ushort>("Proportional", 0x0221D));
    ent.insert(pair<const char *, ushort>("propto", 0x0221D));
    ent.insert(pair<const char *, ushort>("quaternions", 0x0210D));
    ent.insert(pair<const char *, ushort>("questeq", 0x0225F));
    ent.insert(pair<const char *, ushort>("rangle", 0x0232A));
    ent.insert(pair<const char *, ushort>("rationals", 0x0211A));
    ent.insert(pair<const char *, ushort>("rbrace", 0x0007D));
    ent.insert(pair<const char *, ushort>("rbrack", 0x0005D));
    ent.insert(pair<const char *, ushort>("Re", 0x0211C));
    ent.insert(pair<const char *, ushort>("realine", 0x0211B));
    ent.insert(pair<const char *, ushort>("realpart", 0x0211C));
    ent.insert(pair<const char *, ushort>("reals", 0x0211D));
    ent.insert(pair<const char *, ushort>("ReverseElement", 0x0220B));
    ent.insert(pair<const char *, ushort>("ReverseEquilibrium", 0x021CB));
    ent.insert(pair<const char *, ushort>("ReverseUpEquilibrium", 0x0296F));
    ent.insert(pair<const char *, ushort>("RightAngleBracket", 0x0232A));
    ent.insert(pair<const char *, ushort>("rightarrow", 0x02192));
    ent.insert(pair<const char *, ushort>("Rightarrow", 0x021D2));
    ent.insert(pair<const char *, ushort>("RightArrow", 0x02192));
    ent.insert(pair<const char *, ushort>("RightArrowBar", 0x021E5));
    ent.insert(pair<const char *, ushort>("RightArrowLeftArrow", 0x021C4));
    ent.insert(pair<const char *, ushort>("rightarrowtail", 0x021A3));
    ent.insert(pair<const char *, ushort>("RightCeiling", 0x02309));
    ent.insert(pair<const char *, ushort>("RightDoubleBracket", 0x0301B));
    ent.insert(pair<const char *, ushort>("RightDownVector", 0x021C2));
    ent.insert(pair<const char *, ushort>("RightFloor", 0x0230B));
    ent.insert(pair<const char *, ushort>("rightharpoondown", 0x021C1));
    ent.insert(pair<const char *, ushort>("rightharpoonup", 0x021C0));
    ent.insert(pair<const char *, ushort>("rightleftarrows", 0x021C4));
    ent.insert(pair<const char *, ushort>("rightleftharpoons", 0x021CC));
    ent.insert(pair<const char *, ushort>("rightrightarrows", 0x021C9));
    ent.insert(pair<const char *, ushort>("rightsquigarrow", 0x0219D));
    ent.insert(pair<const char *, ushort>("RightTee", 0x022A2));
    ent.insert(pair<const char *, ushort>("RightTeeArrow", 0x021A6));
    ent.insert(pair<const char *, ushort>("rightthreetimes", 0x022CC));
    ent.insert(pair<const char *, ushort>("RightTriangle", 0x022B3));
    ent.insert(pair<const char *, ushort>("RightTriangleEqual", 0x022B5));
    ent.insert(pair<const char *, ushort>("RightUpVector", 0x021BE));
    ent.insert(pair<const char *, ushort>("RightVector", 0x021C0));
    ent.insert(pair<const char *, ushort>("risingdotseq", 0x02253));
    ent.insert(pair<const char *, ushort>("rmoustache", 0x023B1));
    ent.insert(pair<const char *, ushort>("Rrightarrow", 0x021DB));
    ent.insert(pair<const char *, ushort>("Rsh", 0x021B1));
    ent.insert(pair<const char *, ushort>("searrow", 0x02198));
    ent.insert(pair<const char *, ushort>("setminus", 0x02216));
    ent.insert(pair<const char *, ushort>("ShortLeftArrow", 0x02190));
    ent.insert(pair<const char *, ushort>("shortmid", 0x02223));
    ent.insert(pair<const char *, ushort>("shortparallel", 0x02225));
    ent.insert(pair<const char *, ushort>("ShortRightArrow", 0x02192));
    ent.insert(pair<const char *, ushort>("simeq", 0x02243));
    ent.insert(pair<const char *, ushort>("SmallCircle", 0x02218));
    ent.insert(pair<const char *, ushort>("smallsetminus", 0x02216));
    ent.insert(pair<const char *, ushort>("spadesuit", 0x02660));
    ent.insert(pair<const char *, ushort>("Sqrt", 0x0221A));
    ent.insert(pair<const char *, ushort>("sqsubset", 0x0228F));
    ent.insert(pair<const char *, ushort>("sqsubseteq", 0x02291));
    ent.insert(pair<const char *, ushort>("sqsupset", 0x02290));
    ent.insert(pair<const char *, ushort>("sqsupseteq", 0x02292));
    ent.insert(pair<const char *, ushort>("Square", 0x025A1));
    ent.insert(pair<const char *, ushort>("SquareIntersection", 0x02293));
    ent.insert(pair<const char *, ushort>("SquareSubset", 0x0228F));
    ent.insert(pair<const char *, ushort>("SquareSubsetEqual", 0x02291));
    ent.insert(pair<const char *, ushort>("SquareSuperset", 0x02290));
    ent.insert(pair<const char *, ushort>("SquareSupersetEqual", 0x02292));
    ent.insert(pair<const char *, ushort>("SquareUnion", 0x02294));
    ent.insert(pair<const char *, ushort>("Star", 0x022C6));
    ent.insert(pair<const char *, ushort>("straightepsilon", 0x003B5));
    ent.insert(pair<const char *, ushort>("straightphi", 0x003C6));
    ent.insert(pair<const char *, ushort>("subset", 0x02282));
    ent.insert(pair<const char *, ushort>("Subset", 0x022D0));
    ent.insert(pair<const char *, ushort>("subseteq", 0x02286));
    ent.insert(pair<const char *, ushort>("subseteqq", 0x02286));
    ent.insert(pair<const char *, ushort>("SubsetEqual", 0x02286));
    ent.insert(pair<const char *, ushort>("subsetneq", 0x0228A));
    ent.insert(pair<const char *, ushort>("subsetneqq", 0x0228A));
    ent.insert(pair<const char *, ushort>("succ", 0x0227B));
    ent.insert(pair<const char *, ushort>("succapprox", 0x0227F));
    ent.insert(pair<const char *, ushort>("succcurlyeq", 0x0227D));
    ent.insert(pair<const char *, ushort>("Succeeds", 0x0227B));
    ent.insert(pair<const char *, ushort>("SucceedsEqual", 0x0227D));
    ent.insert(pair<const char *, ushort>("SucceedsSlantEqual", 0x0227D));
    ent.insert(pair<const char *, ushort>("SucceedsTilde", 0x0227F));
    ent.insert(pair<const char *, ushort>("succeq", 0x0227D));
    ent.insert(pair<const char *, ushort>("succnapprox", 0x022E9));
    ent.insert(pair<const char *, ushort>("succneqq", 0x02AB6));
    ent.insert(pair<const char *, ushort>("succnsim", 0x022E9));
    ent.insert(pair<const char *, ushort>("succsim", 0x0227F));
    ent.insert(pair<const char *, ushort>("SuchThat", 0x0220B));
    ent.insert(pair<const char *, ushort>("Sum", 0x02211));
    ent.insert(pair<const char *, ushort>("Superset", 0x02283));
    ent.insert(pair<const char *, ushort>("SupersetEqual", 0x02287));
    ent.insert(pair<const char *, ushort>("supset", 0x02283));
    ent.insert(pair<const char *, ushort>("Supset", 0x022D1));
    ent.insert(pair<const char *, ushort>("supseteq", 0x02287));
    ent.insert(pair<const char *, ushort>("supseteqq", 0x02287));
    ent.insert(pair<const char *, ushort>("supsetneq", 0x0228B));
    ent.insert(pair<const char *, ushort>("supsetneqq", 0x0228B));
    ent.insert(pair<const char *, ushort>("swarrow", 0x02199));
    ent.insert(pair<const char *, ushort>("therefore", 0x02234));
    ent.insert(pair<const char *, ushort>("Therefore", 0x02234));
    ent.insert(pair<const char *, ushort>("thickapprox", 0x02248));
    ent.insert(pair<const char *, ushort>("thicksim", 0x0223C));
    ent.insert(pair<const char *, ushort>("ThinSpace", 0x02009));
    ent.insert(pair<const char *, ushort>("Tilde", 0x0223C));
    ent.insert(pair<const char *, ushort>("TildeEqual", 0x02243));
    ent.insert(pair<const char *, ushort>("TildeFullEqual", 0x02245));
    ent.insert(pair<const char *, ushort>("TildeTilde", 0x02248));
    ent.insert(pair<const char *, ushort>("toea", 0x02928));
    ent.insert(pair<const char *, ushort>("tosa", 0x02929));
    ent.insert(pair<const char *, ushort>("triangle", 0x025B5));
    ent.insert(pair<const char *, ushort>("triangledown", 0x025BF));
    ent.insert(pair<const char *, ushort>("triangleleft", 0x025C3));
    ent.insert(pair<const char *, ushort>("trianglelefteq", 0x022B4));
    ent.insert(pair<const char *, ushort>("triangleq", 0x0225C));
    ent.insert(pair<const char *, ushort>("triangleright", 0x025B9));
    ent.insert(pair<const char *, ushort>("trianglerighteq", 0x022B5));
    ent.insert(pair<const char *, ushort>("TripleDot", 0x020DB));
    ent.insert(pair<const char *, ushort>("twoheadleftarrow", 0x0219E));
    ent.insert(pair<const char *, ushort>("twoheadrightarrow", 0x021A0));
    ent.insert(pair<const char *, ushort>("ulcorner", 0x0231C));
    ent.insert(pair<const char *, ushort>("Union", 0x022C3));
    ent.insert(pair<const char *, ushort>("UnionPlus", 0x0228E));
    ent.insert(pair<const char *, ushort>("uparrow", 0x02191));
    ent.insert(pair<const char *, ushort>("Uparrow", 0x021D1));
    ent.insert(pair<const char *, ushort>("UpArrow", 0x02191));
    ent.insert(pair<const char *, ushort>("UpArrowDownArrow", 0x021C5));
    ent.insert(pair<const char *, ushort>("updownarrow", 0x02195));
    ent.insert(pair<const char *, ushort>("Updownarrow", 0x021D5));
    ent.insert(pair<const char *, ushort>("UpDownArrow", 0x02195));
    ent.insert(pair<const char *, ushort>("UpEquilibrium", 0x0296E));
    ent.insert(pair<const char *, ushort>("upharpoonleft", 0x021BF));
    ent.insert(pair<const char *, ushort>("upharpoonright", 0x021BE));
    ent.insert(pair<const char *, ushort>("UpperLeftArrow", 0x02196));
    ent.insert(pair<const char *, ushort>("UpperRightArrow", 0x02197));
    ent.insert(pair<const char *, ushort>("upsilon", 0x003C5));
    ent.insert(pair<const char *, ushort>("Upsilon", 0x003D2));
    ent.insert(pair<const char *, ushort>("UpTee", 0x022A5));
    ent.insert(pair<const char *, ushort>("UpTeeArrow", 0x021A5));
    ent.insert(pair<const char *, ushort>("upuparrows", 0x021C8));
    ent.insert(pair<const char *, ushort>("urcorner", 0x0231D));
    ent.insert(pair<const char *, ushort>("varepsilon", 0x0025B));
    ent.insert(pair<const char *, ushort>("varkappa", 0x003F0));
    ent.insert(pair<const char *, ushort>("varnothing", 0x02205));
    ent.insert(pair<const char *, ushort>("varphi", 0x003D5));
    ent.insert(pair<const char *, ushort>("varpi", 0x003D6));
    ent.insert(pair<const char *, ushort>("varpropto", 0x0221D));
    ent.insert(pair<const char *, ushort>("varrho", 0x003F1));
    ent.insert(pair<const char *, ushort>("varsigma", 0x003C2));
    ent.insert(pair<const char *, ushort>("varsubsetneq", 0x0228A));
    ent.insert(pair<const char *, ushort>("varsubsetneqq", 0x0228A));
    ent.insert(pair<const char *, ushort>("varsupsetneq", 0x0228B));
    ent.insert(pair<const char *, ushort>("varsupsetneqq", 0x0228B));
    ent.insert(pair<const char *, ushort>("vartheta", 0x003D1));
    ent.insert(pair<const char *, ushort>("vartriangleleft", 0x022B2));
    ent.insert(pair<const char *, ushort>("vartriangleright", 0x022B3));
    ent.insert(pair<const char *, ushort>("vee", 0x02228));
    ent.insert(pair<const char *, ushort>("Vee", 0x022C1));
    ent.insert(pair<const char *, ushort>("vert", 0x0007C));
    ent.insert(pair<const char *, ushort>("Vert", 0x02016));
    ent.insert(pair<const char *, ushort>("VerticalBar", 0x02223));
    ent.insert(pair<const char *, ushort>("VerticalTilde", 0x02240));
    ent.insert(pair<const char *, ushort>("VeryThinSpace", 0x0200A));
    ent.insert(pair<const char *, ushort>("wedge", 0x02227));
    ent.insert(pair<const char *, ushort>("Wedge", 0x022C0));
    ent.insert(pair<const char *, ushort>("wp", 0x02118));
    ent.insert(pair<const char *, ushort>("wr", 0x02240));
    ent.insert(pair<const char *, ushort>("zeetrf", 0x02128));
    ent.insert(pair<const char *, ushort>("ZeroWidthSpace", 0x0200B));
}
